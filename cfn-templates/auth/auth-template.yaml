Description: >-
  {"createdOn":"Linux","createdBy":"Amplify","createdWith":"7.6.5","stackType":"auth-Cognito","metadata":{}}
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  env:
    Type: String
  allowUnauthenticatedIdentities:
    Type: String
  autoVerifiedAttributes:
    Type: CommaDelimitedList
  mfaConfiguration:
    Type: String
  mfaTypes:
    Type: CommaDelimitedList
  smsAuthenticationMessage:
    Type: String
  smsVerificationMessage:
    Type: String
  emailVerificationSubject:
    Type: String
  emailVerificationMessage:
    Type: String
  defaultPasswordPolicy:
    Type: String
  passwordPolicyMinLength:
    Type: String
  passwordPolicyCharacters:
    Type: CommaDelimitedList
  requiredAttributes:
    Type: CommaDelimitedList
  aliasAttributes:
    Type: CommaDelimitedList
  userpoolClientGenerateSecret:
    Type: String
  userpoolClientRefreshTokenValidity:
    Type: String
  userpoolClientWriteAttributes:
    Type: CommaDelimitedList
  userpoolClientReadAttributes:
    Type: CommaDelimitedList
  userpoolClientLambdaRole:
    Type: String
  userpoolClientSetAttributes:
    Type: String
  resourceName:
    Type: String
  authSelections:
    Type: String
  useDefault:
    Type: String
  userPoolGroupList:
    Type: CommaDelimitedList
  serviceName:
    Type: String
  usernameCaseSensitive:
    Type: String
  useEnabledMfas:
    Type: String
  authRoleArn:
    Type: String
  unauthRoleArn:
    Type: String
  breakCircularDependency:
    Type: String
  dependsOn:
    Type: CommaDelimitedList
Conditions:
  ShouldNotCreateEnvResources: !Equals
    - !Ref env
    - NONE
  ShouldOutputAppClientSecrets: !Equals
    - !Ref userpoolClientGenerateSecret
    - true
Resources:
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: !Ref emailVerificationMessage
      EmailVerificationSubject: !Ref emailVerificationSubject
      MfaConfiguration: !Ref mfaConfiguration
      Policies:
        PasswordPolicy:
          MinimumLength: !Ref passwordPolicyMinLength
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - Mutable: true
          Name: email
          Required: true
      UsernameConfiguration:
        CaseSensitive: false
  UserPoolClientWeb:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: testamde1aa13c_app_clientWeb
      RefreshTokenValidity: !Ref userpoolClientRefreshTokenValidity
    DependsOn:
      - UserPool
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: testamde1aa13c_app_client
      GenerateSecret: !Ref userpoolClientGenerateSecret
      RefreshTokenValidity: !Ref userpoolClientRefreshTokenValidity
    DependsOn:
      - UserPool
  UserPoolClientRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      RoleName: !If
        - ShouldNotCreateEnvResources
        - !Ref userpoolClientLambdaRole
        - !Join
          - ""
          - - upClientLambdaRolede1aa13c
            - !Select
              - 3
              - !Split
                - "-"
                - !Ref "AWS::StackName"
            - "-"
            - !Ref env
    DependsOn:
      - UserPoolClient
  UserPoolClientLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const identity = new aws.CognitoIdentityServiceProvider();
          exports.handler = (event, context, callback) => {
            if (event.RequestType == 'Delete') {
              response.send(event, context, response.SUCCESS, {});
            }
            if (event.RequestType == 'Update' || event.RequestType == 'Create') {
              const params = {
                ClientId: event.ResourceProperties.clientId,
                UserPoolId: event.ResourceProperties.userpoolId,
              };
              identity
                .describeUserPoolClient(params)
                .promise()
                .then(res => {
                  response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });
                })
                .catch(err => {
                  response.send(event, context, response.FAILED, { err });
                });
            }
          };
      Role: !GetAtt
        - UserPoolClientRole
        - Arn
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
    DependsOn:
      - UserPoolClientRole
  UserPoolClientLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "cognito-idp:DescribeUserPoolClient"
            Resource: !GetAtt
              - UserPool
              - Arn
      PolicyName: testamde1aa13c_userpoolclient_lambda_iam_policy
      Roles:
        - !Ref UserPoolClientRole
    DependsOn:
      - UserPoolClientLambda
  UserPoolClientLogPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !Sub
              - >-
                arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - region: !Ref "AWS::Region"
                account: !Ref "AWS::AccountId"
                lambda: !Ref UserPoolClientLambda
      PolicyName: testamde1aa13c_userpoolclient_lambda_log_policy
      Roles:
        - !Ref UserPoolClientRole
    DependsOn:
      - UserPoolClientLambdaPolicy
  UserPoolClientInputs:
    Type: "Custom::LambdaCallout"
    Properties:
      ServiceToken: !GetAtt
        - UserPoolClientLambda
        - Arn
      clientId: !Ref UserPoolClient
      userpoolId: !Ref UserPool
    DependsOn:
      - UserPoolClientLogPolicy
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      AllowUnauthenticatedIdentities: !Ref allowUnauthenticatedIdentities
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Sub
            - "cognito-idp.${region}.amazonaws.com/${client}"
            - region: !Ref "AWS::Region"
              client: !Ref UserPool
        - ClientId: !Ref UserPoolClientWeb
          ProviderName: !Sub
            - "cognito-idp.${region}.amazonaws.com/${client}"
            - region: !Ref "AWS::Region"
              client: !Ref UserPool
    DependsOn:
      - UserPoolClientInputs
  IdentityPoolRoleMap:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !Ref unauthRoleArn
        authenticated: !Ref authRoleArn
    DependsOn:
      - IdentityPool
Outputs:
  IdentityPoolId:
    Description: Id for the identity pool
    Value: !Ref IdentityPool
  UserPoolId:
    Description: Id for the user pool
    Value: !Ref UserPool
  UserPoolArn:
    Description: Arn for the user pool
    Value: !GetAtt
      - UserPool
      - Arn
  AppClientIDWeb:
    Description: The user pool app client id for web
    Value: !Ref UserPoolClientWeb
  AppClientID:
    Description: The user pool app client id
    Value: !Ref UserPoolClient
  AppClientSecret:
    Value: !GetAtt
      - UserPoolClientInputs
      - appSecret
    Condition: ShouldOutputAppClientSecrets
  Region:
    Description: Region
    Value: !Ref "AWS::Region"
